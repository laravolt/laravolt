<?php

use Illuminate\Support\Facades\Session;
use Laravolt\SemanticForm\Elements\FormOpen;

class FormOpenTest extends \PHPUnit\Framework\TestCase
{
    public function test_render_basic_form_open()
    {
        Session::shouldReceive('token')->once()->andReturn('abc123');

        $form = new FormOpen;
        $expected = '<form method="POST" action="" class="ui form"><input type="hidden" name="_token" value="abc123">';
        $result = $form->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_basic_form_open_without_token()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form">';
        $result = $form->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_basic_form_open_with_action()
    {
        $form = new FormOpen('/test');
        $form->withoutToken();
        $expected = '<form method="POST" action="/test" class="ui form">';
        $result = $form->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_post_form_open()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form">';
        $result = $form->post()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_get_form_open()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="GET" action="" class="ui form">';
        $result = $form->get()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_put_form_open()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form"><input type="hidden" name="_method" value="PUT">';
        $result = $form->put()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_patch_form_open()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form"><input type="hidden" name="_method" value="PATCH">';
        $result = $form->patch()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_delete_form_open()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form"><input type="hidden" name="_method" value="DELETE">';
        $result = $form->delete()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_set_action()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="/test" class="ui form">';
        $result = $form->action('/test')->render();

        $this->assertEquals($expected, $result);
    }

    public function test_set_route()
    {
        \Illuminate\Support\Facades\URL::shouldReceive('route')->once()->andReturn('/test');

        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="/test" class="ui form">';
        $result = $form->route('test.store')->render();

        $this->assertEquals($expected, $result);
    }

    public function test_set_route_with_parameter()
    {
        \Illuminate\Support\Facades\URL::shouldReceive('route')
            ->with('test.update', ['id' => 1], true)
            ->once()
            ->andReturn('/test/1');

        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="/test/1" class="ui form">';
        $result = $form->route('test.update', ['id' => 1])->render();

        $this->assertEquals($expected, $result);
    }

    public function test_set_url()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="/test" class="ui form">';
        $result = $form->url('/test')->render();

        $this->assertEquals($expected, $result);
    }

    public function test_set_custom_attribute()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form" data-test="sample">';
        $result = $form->attribute('data-test', 'sample')->render();

        $this->assertEquals($expected, $result);
    }

    public function test_clear_custom_attribute()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form">';
        $result = $form->attribute('data-test', 'sample')->clear('data-test')->render();

        $this->assertEquals($expected, $result);
    }

    public function test_multipart()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form" enctype="multipart/form-data">';
        $result = $form->multipart()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_encoding_type()
    {
        $form = new FormOpen;
        $form->withoutToken();
        $expected = '<form method="POST" action="" class="ui form" enctype="custom">';
        $result = $form->encodingType('custom')->render();

        $this->assertEquals($expected, $result);
    }

    public function test_can_render_csrf_token()
    {
        Session::shouldReceive('token')->once()->andReturn('1');

        $form = new FormOpen;
        $expected = '<form method="POST" action="" class="ui form"><input type="hidden" name="_token" value="1">';
        $result = (string) $form;

        $this->assertEquals($expected, $result);
    }

    public function test_render_custom_method_with_token()
    {
        Session::shouldReceive('token')->once()->andReturn('2');

        $form = new FormOpen;
        $expected = '<form method="POST" action="" class="ui form"><input type="hidden" name="_token" value="2"><input type="hidden" name="_method" value="DELETE">';
        $result = $form->delete()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_render_get_with_token()
    {
        $form = new FormOpen;
        $expected = '<form method="GET" action="" class="ui form">';
        $result = $form->get()->render();

        $this->assertEquals($expected, $result);
    }

    public function test_horizontal_form()
    {
        $form = new FormOpen;
        $expected = '<form method="GET" action="" class="ui form horizontal">';
        $result = $form->horizontal()->get()->render();

        $this->assertEquals($expected, $result);
    }

    protected function tearDown(): void
    {
        Mockery::close();
    }
}
